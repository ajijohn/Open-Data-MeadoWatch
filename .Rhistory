par(mfrow=c(4,3))
for (i in 2015:2019){
#subset for the each year
aa = subset(gb.dates, gb.dates$Year==i)
#make sure DOY is numeric
aa.gb.days.with.rep = as.numeric(names(table(aa$DOY)))
#calculate difference in dates with previous report
aa.gb.bet.days = diff(aa.gb.days.with.rep, lag=1)
#plot it
plot(aa.gb.bet.days~aa.gb.days.with.rep[-1],
main=paste(i),
pch=16,
col=rgb(.8,.65,.4,.8),
cex=2,
xlim=c(0,365),
ylim=c(0,20),
xlab='Day of the year',
ylab='Temporal frequency of Meadowatch reports (time since last report)')
#add reference lines and indications of daily and weekly resolutions
abline(h=1, lty=2, lwd=0.5)
text(30,2.5,'Daily')
abline(h=7, lty=2, lwd=0.5)
text(30,9,'Weekly')
}
i=1
i=2015
#subset for the each year
aa = subset(gb.dates, gb.dates$Year==i)
#make sure DOY is numeric
aa.gb.days.with.rep = as.numeric(names(table(aa$DOY)))
#calculate difference in dates with previous report
aa.gb.bet.days = diff(aa.gb.days.with.rep, lag=1)
#add reference lines and indications of daily and weekly resolutions
print(mean(aa.gb.bet.days))
for (i in 2015:2019){
#subset for the each year
aa = subset(gb.dates, gb.dates$Year==i)
#make sure DOY is numeric
aa.gb.days.with.rep = as.numeric(names(table(aa$DOY)))
#calculate difference in dates with previous report
aa.gb.bet.days = diff(aa.gb.days.with.rep, lag=1)
#plot it
plot(aa.gb.bet.days~aa.gb.days.with.rep[-1],
main=paste(i),
pch=16,
col=rgb(.8,.65,.4,.8),
cex=2,
xlim=c(0,365),
ylim=c(0,20),
xlab='Day of the year',
ylab='Temporal frequency of Meadowatch reports (time since last report)')
#add reference lines and indications of daily and weekly resolutions
print(mean(aa.gb.bet.days))
abline(h=1, lty=2, lwd=0.5)
text(30,2.5,'Daily')
abline(h=7, lty=2, lwd=0.5)
text(30,9,'Weekly')
}
##REFLECTION LAKE#
for (i in 2013:2019){
#subset for the each year
aa = subset(rl.dates, rl.dates$Year==i)
#make sure DOY is numeric
aa.gb.days.with.rep = as.numeric(names(table(aa$DOY)))
#calculate difference in dates with previous report
aa.gb.bet.days = diff(aa.gb.days.with.rep, lag=1)
#plot it
plot(aa.gb.bet.days ~aa.gb.days.with.rep[-1],
main=paste(i),
pch=16,
col=rgb(.18,.34,.47,.8),
cex=2,
xlim=c(0,365),
ylim=c(0,20),
xlab='Day of the year',
ylab='Temporal frequency of Meadowatch reports (time since last report)')
#add reference lines and indications of daily and weekly resolutions
print(mean(aa.gb.bet.days))
abline(h=1, lty=2, lwd=0.5)
text(30,2.5,'Daily')
abline(h=7, lty=2, lwd=0.5)
text(30,9,'Weekly')
}
##REFLECTION LAKE#
for (i in 2013:2019){
#subset for the each year
aa = subset(rl.dates, rl.dates$Year==i)
#make sure DOY is numeric
aa.gb.days.with.rep = as.numeric(names(table(aa$DOY)))
#calculate difference in dates with previous report
aa.gb.bet.days = diff(aa.gb.days.with.rep, lag=1)
#plot it
plot(aa.gb.bet.days ~aa.gb.days.with.rep[-1],
main=paste(i),
pch=16,
col=rgb(.18,.34,.47,.8),
cex=2,
xlim=c(0,365),
ylim=c(0,20),
xlab='Day of the year',
ylab='Temporal frequency of Meadowatch reports (time since last report)')
#add reference lines and indications of daily and weekly resolutions
print(i)
print(mean(aa.gb.bet.days))
abline(h=1, lty=2, lwd=0.5)
text(30,2.5,'Daily')
abline(h=7, lty=2, lwd=0.5)
text(30,9,'Weekly')
}
par(mfrow=c(4,3))
for (i in 2015:2019){
#subset for the each year
aa = subset(gb.dates, gb.dates$Year==i)
#make sure DOY is numeric
aa.gb.days.with.rep = as.numeric(names(table(aa$DOY)))
#calculate difference in dates with previous report
aa.gb.bet.days = diff(aa.gb.days.with.rep, lag=1)
#plot it
plot(aa.gb.bet.days~aa.gb.days.with.rep[-1],
main=paste(i),
pch=16,
col=rgb(.8,.65,.4,.8),
cex=2,
xlim=c(0,365),
ylim=c(0,20),
xlab='Day of the year',
ylab='Temporal frequency of Meadowatch reports (time since last report)')
#add reference lines and indications of daily and weekly resolutions
print(i)
print(mean(aa.gb.bet.days))
abline(h=1, lty=2, lwd=0.5)
text(30,2.5,'Daily')
abline(h=7, lty=2, lwd=0.5)
text(30,9,'Weekly')
}
##REFLECTION LAKE#
for (i in 2013:2019){
#subset for the each year
aa = subset(rl.dates, rl.dates$Year==i)
#make sure DOY is numeric
aa.gb.days.with.rep = as.numeric(names(table(aa$DOY)))
#calculate difference in dates with previous report
aa.gb.bet.days = diff(aa.gb.days.with.rep, lag=1)
#plot it
plot(aa.gb.bet.days ~aa.gb.days.with.rep[-1],
main=paste(i),
pch=16,
col=rgb(.18,.34,.47,.8),
cex=2,
xlim=c(0,365),
ylim=c(0,20),
xlab='Day of the year',
ylab='Temporal frequency of Meadowatch reports (time since last report)')
#add reference lines and indications of daily and weekly resolutions
print(i)
print(mean(aa.gb.bet.days))
abline(h=1, lty=2, lwd=0.5)
text(30,2.5,'Daily')
abline(h=7, lty=2, lwd=0.5)
text(30,9,'Weekly')
}
aa.gb.bet.days
#load report data
MW_PhenoDat_2013_2019 <- read.csv("MW_PhenoDat_2013_2019.csv")
head(MW_PhenoDat_2013_2019)
head(MW_PhenoDat_2013_2019)
scientists = subset(MW_PhenoDat_2013_2019, MW_PhenoDat_2013_2019$QA.QC ==1)
non-scientists = subset(MW_PhenoDat_2013_2019, MW_PhenoDat_2013_2019$QA.QC == 0)
head scientists
scientists = subset(MW_PhenoDat_2013_2019, MW_PhenoDat_2013_2019$QA.QC ==1)
non.scientists = subset(MW_PhenoDat_2013_2019, MW_PhenoDat_2013_2019$QA.QC == 0)
sci.gb = subset(scientists, scientists$Transect == "Glacier Basin")
non.sci.gb = subset(non.scientists, non.scientists$Transect == "Glacier Basin")
sci.rl = subset(scientists, scientists$Transect == "Reflection Lakes")
non.sci.rl = subset(non.scientists, non.scientists$Transect == "Reflection Lakes")
##gb
head(sci.gb)
table(sci.gb$Date)
dates.with.sci = data.frame(names(table(sci.gb$Date))
)
dates.with.sci
dates.with.sci = data.frame('dates.with.scientists.gb' = names(table(sci.gb$Date)))
##gb
head(sci.gb)
sci.assessment = data.frame('Date' = sci.gb$Date,
'Species' = sci.gb$Species,
'Budding' = sci.gb$Bud,
'Flowering' = sci.gb$Flower,
'Fruiting' = sci.gb$Fruit
'Seeding' = sci.gb$Disperse)
sci.assessment = data.frame('Date' = sci.gb$Date,
'Species' = sci.gb$Species,
'Budding' = sci.gb$Bud,
'Flowering' = sci.gb$Flower,
'Fruiting' = sci.gb$Fruit,
'Seeding' = sci.gb$Disperse)
head(sci.assessment)
non.sci.assessment = data.frame('Date' = non.sci.gb$Date,
'Species' = non.sci.gb$Species,
'Budding' = non.sci.gb$Bud,
'Flowering' = non.sci.gb$Flower,
'Fruiting' = non.sci.gb$Fruit,
'Seeding' = non.sci.gb$Disperse)
head(non.sci.assessment)
togetherness = merge(sci.assessment, non.sci.assessment)
head(togetherness)
?merge
togetherness = merge(sci.assessment, non.sci.assessment, incomparables=NA)
togetherness = merge(sci.assessment, non.sci.assessment,by.y='Date',incomparables=NA)
togetherness = merge(sci.assessment, non.sci.assessment,by=Date,incomparables=NA)
togetherness = merge(sci.assessment, non.sci.assessment,by=sci.assessment$Date,incomparables=NA)
togetherness = merge(sci.assessment, non.sci.assessment,all = F)
head(togetherness)
head(non.sci.assessment)
togetherness = merge(sci.assessment, non.sci.assessment,all = T)
head(togetherness)
togetherness = merge(sci.assessment, non.sci.assessment,all = F)
head(togetherness)
togetherness
sci.assessment = data.frame('Date' = sci.gb$Date,
'Species' = sci.gb$Species,
'sci.Budding' = sci.gb$Bud,
'sci.Flowering' = sci.gb$Flower,
'sci.Fruiting' = sci.gb$Fruit,
'sci.Seeding' = sci.gb$Disperse)
non.sci.assessment = data.frame('Date' = non.sci.gb$Date,
'Species' = non.sci.gb$Species,
'cit.Budding' = non.sci.gb$Bud,
'cit.Flowering' = non.sci.gb$Flower,
'cit.Fruiting' = non.sci.gb$Fruit,
'cit.Seeding' = non.sci.gb$Disperse)
togetherness = merge(sci.assessment, non.sci.assessment,all = F)
head(togetherness)
View(sci.assessment)
'Plot' = non.sci.gb$Site_Code
non.sci.gb$Site_Code
sci.assessment = data.frame('Date' = sci.gb$Date,
'Species' = sci.gb$Species,
'Plot' = sci.gb$Site_Code,
'sci.Budding' = sci.gb$Bud,
'sci.Flowering' = sci.gb$Flower,
'sci.Fruiting' = sci.gb$Fruit,
'sci.Seeding' = sci.gb$Disperse)
non.sci.assessment = data.frame('Date' = non.sci.gb$Date,
'Species' = non.sci.gb$Species,
'Plot' = non.sci.gb$Site_Code,
'cit.Budding' = non.sci.gb$Bud,
'cit.Flowering' = non.sci.gb$Flower,
'cit.Fruiting' = non.sci.gb$Fruit,
'cit.Seeding' = non.sci.gb$Disperse)
head(sci.assessment)
head(non.sci.assessment)
togetherness = merge(sci.assessment, non.sci.assessment,all = F)
head(togetherness)
View(sci.assessment)
View(non.sci.assessment)
View(sci.assessment)
plot(sci.assessment$Date~non.sci.assessment$Date)
plot(sci.assessment$Date)
plot(sci.assessment$Date)
sci.assessment$Date
table(sci.assessment$Date)
table(non.sci.assessment$Date)
table(togetherness$Date)
dim(table(togetherness$Date)
)
head(togetherness)
subset(togetherness, togetherness$sci.Budding == 1 & togetherness$cit.Budding == 1)
head(togetherness)
Budding.SY-CY = subset(togetherness, togetherness$sci.Budding == 1 & togetherness$cit.Budding == 1)
Budding.SY.CY = subset(togetherness, togetherness$sci.Budding == 1 & togetherness$cit.Budding == 1)
Budding.SY.CY
head(Budding.SY.CY)
dim(subset(togetherness, togetherness$sci.Budding == 1 & togetherness$cit.Budding == 1))[1]
Budding.SY.CY = dim(subset(togetherness, togetherness$sci.Budding == 1 & togetherness$cit.Budding == 1))[1]
Budding.SY.CN = dim(subset(togetherness, togetherness$sci.Budding == 1 & togetherness$cit.Budding == 0))[1]
Budding.SN.CY = dim(subset(togetherness, togetherness$sci.Budding == 0 & togetherness$cit.Budding == 1))[1]
Budding.SN.CN = dim(subset(togetherness, togetherness$sci.Budding == 0 & togetherness$cit.Budding == 0))[1]
allness = Budding.SY.CY + Budding.SY.CN + Budding.SN.CY + Budding.SN.CN
accuracy.gb = (Budding.SY.CY + Budding.SN.CN) / allness
accuracy.gb
sensitivity.gb.budding = (Budding.SY.CY / (Budding.SY.CY+Budding.SN.CY))
sensitivity.gb.budding
specificity = (Budding.SN.CN / (Budding.SN.CN+Budding.SY.CN))
specificity
?function
calculate.kappa = function(dataset, sci.pheno, cit.pheno){
true.pos = dim(subset(dataset, dataset$sci.pheno == 1 & dataset$cit.pheno == 1))[1]
}
calculate.kappa(togetherness, sci.Budding, cit.Budding)
a = calculate.kappa(togetherness, sci.Budding, cit.Budding)
a
Budding.SY.CY = dim(subset(togetherness, togetherness$sci.Budding == 1 & togetherness$cit.Budding == 1))[1]
Budding.SY.CY
true.pos
calculate.kappa = function(dataset, sci.pheno, cit.pheno){
true.pos = dim(subset(dataset, dataset$sci.pheno == 1 & dataset$cit.pheno == 1))[1]
print(true.pos)
}
calculate.kappa(togetherness, sci.Budding, cit.Budding)
calculate.kappa = function(dataset){
true.pos = dim(subset(dataset, dataset$sci.Budding == 1 & dataset$cit.Budding == 1))[1]
print(true.pos)
}
calculate.kappa(togetherness)
head(togetherness)
calculate.kappa = function(dataset, scientist, citizen){
true.pos = dim(subset(dataset, scientist == 1 & citizen == 1))[1]
print(true.pos)
}
calculate.kappa(togetherness, sci.Budding, cit.Budding)
calculate.kappa = function(dataset, scientist, citizen){
true.pos = dim(subset(dataset, dataset$scientist == 1 & dataset$citizen == 1))[1]
print(true.pos)
}
calculate.kappa(togetherness, sci.Budding, cit.Budding)
calculate.kappa = function(dataset, scientist, citizen){
true.pos = dim(subset(dataset, dataset$paste(scientist) == 1 & dataset$paste(citizen) == 1))[1]
print(true.pos)
}
calculate.kappa(togetherness, sci.Budding, cit.Budding)
true.pos = dim(subset(dataset, dataset$variable == 1 & dataset$variable2 == 1))[1]
calculate.kappa = function(dataset, scientist, citizen){
variable = paste(scientist)
variable2 = paste(citizen)
true.pos = dim(subset(dataset, dataset$variable == 1 & dataset$variable2 == 1))[1]
print(true.pos)
}
calculate.kappa(togetherness, sci.Budding, cit.Budding)
head(togetherness)
?if
if(phenostate=='budding', a=0)
if(phenostate=='budding') a=0
calculate.kappa.here = function(dataset, phenostate){
if(phenostate=='budding') {a=0}
if(phenostate=='flowering') {a=1}
if(phenostate=='fruiting') {a=2}
if(phenostate=='seeding') {a=3}
SY.CY = dim(subset(dataset, dataset[,4+a] == 1 & dataset[8+a] == 1))[1]
print(SY.CY)
}
calculate.kappa.here(togetherness,budding)
calculate.kappa.here(togetherness,'budding')
calculate.kappa.here = function(dataset, phenostate){
if(phenostate=='budding') {a=0}
if(phenostate=='flowering') {a=1}
if(phenostate=='fruiting') {a=2}
if(phenostate=='seeding') {a=3}
SY.CY = dim(subset(dataset, dataset[,4+a] == 1 & dataset[8+a] == 1))[1]
SY.CN = dim(subset(dataset, dataset[,4+a] == 1 & dataset[8+a] == 0))[1]
SN.CY = dim(subset(dataset, dataset[,4+a] == 0 & dataset[8+a] == 1))[1]
SN.CN = dim(subset(dataset, dataset[,4+a] == 0 & dataset[8+a] == 0))[1]
print(c(SY.CY,SY.CN,SN.CY,SN.CN))
}
calculate.kappa.here(togetherness,'budding')
calculate.kappa.here = function(dataset, phenostate){
if(phenostate=='budding') {a=0}
if(phenostate=='flowering') {a=1}
if(phenostate=='fruiting') {a=2}
if(phenostate=='seeding') {a=3}
SY.CY = dim(subset(dataset, dataset[,4+a] == 1 & dataset[8+a] == 1))[1]
SY.CN = dim(subset(dataset, dataset[,4+a] == 1 & dataset[8+a] == 0))[1]
SN.CY = dim(subset(dataset, dataset[,4+a] == 0 & dataset[8+a] == 1))[1]
SN.CN = dim(subset(dataset, dataset[,4+a] == 0 & dataset[8+a] == 0))[1]
print(c('true pos =', SY.CY))
print(c('sci.pos.cit.neg = ',SY.CN))
print(c('sci.neg.sci.pos = ',SN.CY))
print(c('true neg =', SN.CN))
}
calculate.kappa.here(togetherness,'flowering')
calculate.kappa.here = function(dataset, phenostate){
#define the phenostate to study
if(phenostate=='budding') {a=0}
if(phenostate=='flowering') {a=1}
if(phenostate=='fruiting') {a=2}
if(phenostate=='seeding') {a=3}
#calculate confusion matrix elements
SY.CY = dim(subset(dataset, dataset[,4+a] == 1 & dataset[8+a] == 1))[1]
SY.CN = dim(subset(dataset, dataset[,4+a] == 1 & dataset[8+a] == 0))[1]
SN.CY = dim(subset(dataset, dataset[,4+a] == 0 & dataset[8+a] == 1))[1]
SN.CN = dim(subset(dataset, dataset[,4+a] == 0 & dataset[8+a] == 0))[1]
print(c('true pos =', SY.CY))
print(c('sci.pos.cit.neg = ',SY.CN))
print(c('sci.neg.sci.pos = ',SN.CY))
print(c('true neg =', SN.CN))
#calculate metrics
acc = ((SY.CY + SN.CN) / (SY.CY+SY.CN+SN.CY+SN.CN))
sen = (SY.CY / (SY.CY+SN.CY))
spe = (SN.CN / (SN.CN+SY.CN))
print(c('accuracy =', acc))
print(c('sensitivity =', sen))
print(c('specificity =', spe))
}
calculate.kappa.here(togetherness,'flowering')
calculate.kappa.here(togetherness,'budding')
calculate.kappa.here(togetherness,'flowering')
calculate.kappa.here(togetherness,'fruiting')
calculate.kappa.here(togetherness,'seeding')
calculate.kappa.here = function(dataset, phenostate){
#define the phenostate to study
if(phenostate=='budding') {a=0}
if(phenostate=='flowering') {a=1}
if(phenostate=='fruiting') {a=2}
if(phenostate=='seeding') {a=3}
#calculate confusion matrix elements and print them
SY.CY = dim(subset(dataset, dataset[,4+a] == 1 & dataset[8+a] == 1))[1]
SY.CN = dim(subset(dataset, dataset[,4+a] == 1 & dataset[8+a] == 0))[1]
SN.CY = dim(subset(dataset, dataset[,4+a] == 0 & dataset[8+a] == 1))[1]
SN.CN = dim(subset(dataset, dataset[,4+a] == 0 & dataset[8+a] == 0))[1]
print(c('true pos =', SY.CY))
print(c('sci.pos.cit.neg = ',SY.CN))
print(c('sci.neg.cit.pos = ',SN.CY))
print(c('true neg =', SN.CN))
#calculate metrics
acc = ((SY.CY + SN.CN) / (SY.CY+SY.CN+SN.CY+SN.CN))
sen = (SY.CY / (SY.CY+SN.CY))
spe = (SN.CN / (SN.CN+SY.CN))
print(c('accuracy =', acc))
print(c('sensitivity =', sen))
print(c('specificity =', spe))
}
calculate.kappa.here(togetherness,'budding')
calculate.kappa.here(togetherness,'flowering')
calculate.kappa.here(togetherness,'fruiting')
calculate.kappa.here(togetherness,'seeding')
head(togetherness)
arla = subset(togetherness, togetherness$Species=='ARLA')
head(arla)
calcalute.kappa.here(arla, 'budding')
calculate.kappa.here(arla, 'budding')
head(MW_PhenoDat_2013_2019)
#and also in tracks, to pair identical situations
sci.gb = subset(scientists, scientists$Transect == "Glacier Basin")
non.sci.gb = subset(non.scientists, non.scientists$Transect == "Glacier Basin")
sci.rl = subset(scientists, scientists$Transect == "Reflection Lakes")
agreement.sci.cit(togetherness,'budding')
#let's define a function to calculate some main agreement matrices
#we can also introduce kappa, if that is more informative
agreement.sci.cit = function(dataset, phenostate){
#define the phenostate to study
if(phenostate=='budding') {a=0}
if(phenostate=='flowering') {a=1}
if(phenostate=='fruiting') {a=2}
if(phenostate=='seeding') {a=3}
#the a value determines the columns we are checking, as they go in that order
#calculate confusion matrix elements and print them
SY.CY = dim(subset(dataset, dataset[,4+a] == 1 & dataset[8+a] == 1))[1]
SY.CN = dim(subset(dataset, dataset[,4+a] == 1 & dataset[8+a] == 0))[1]
SN.CY = dim(subset(dataset, dataset[,4+a] == 0 & dataset[8+a] == 1))[1]
SN.CN = dim(subset(dataset, dataset[,4+a] == 0 & dataset[8+a] == 0))[1]
print(c('true pos =', SY.CY))
print(c('sci.pos.cit.neg = ',SY.CN))
print(c('sci.neg.cit.pos = ',SN.CY))
print(c('true neg =', SN.CN))
#calculate main metrics and print it
acc = ((SY.CY + SN.CN) / (SY.CY+SY.CN+SN.CY+SN.CN))
sen = (SY.CY / (SY.CY+SN.CY))
spe = (SN.CN / (SN.CN+SY.CN))
print(c('accuracy =', acc))
print(c('sensitivity =', sen))
print(c('specificity =', spe))
}
agreement.sci.cit(togetherness,'budding')
agreement.sci.cit(togetherness,'flowering')
agreement.sci.cit(togetherness,'fruiting')
agreement.sci.cit(togetherness,'seeding')
togetherness$Species
levels(togetherness$Species)
table(togetherness$Species)
names(table(togetherness$Species))
ls.sp = names(table(togetherness$Species))
ls.sp = names(table(togetherness$Species))
for (i in 1:11){
sps = subset(togertheness, togetherness$Species == ls.sp[i])
agreement.sci.cit(sps, 'flowering')
}
ls.sp = names(table(togetherness$Species))
for (i in 1:11){
sps = subset(togertherness, togetherness$Species == ls.sp[i])
agreement.sci.cit(sps, 'flowering')
}
for (i in 1:11){
sps = subset(togetherness, togetherness$Species == ls.sp[i])
agreement.sci.cit(sps, 'flowering')
}
agreement.sci.cit(togetherness,'budding')
length(ls.sp)
flowering.test.gb = data.frame('Species' = ls.sp,
'flo.acc' = rep(NA, length(ls.sp)),
'flo.sen' = rep(NA, length(ls.sp)),
'flo.spe' = rep(NA, length(ls.sp)))
agreement.sci.cit(sps, 'flowering')
agreement.sci.cit(sps, 'flowering')[1]
a = agreement.sci.cit(sps, 'flowering')
a
for (i in 1:11){
sps = subset(togetherness, togetherness$Species == ls.sp[i])
print(sl.sp[i])
agreement.sci.cit(sps, 'flowering')
}
ls.sp = names(table(togetherness$Species))
for (i in 1:11){
sps = subset(togetherness, togetherness$Species == ls.sp[i])
print(ls.sp[i])
agreement.sci.cit(sps, 'flowering')
}
ls.sp = names(table(togetherness$Species))
for (i in 1:11){
sps = subset(togetherness, togetherness$Species == ls.sp[i])
print(ls.sp[i])
agreement.sci.cit(sps, 'budding')
}
